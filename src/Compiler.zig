/// compiler: transverse the AST, find the ast nodes and evakueate then to objects, and add it to the pool
const Compiler = @This();
/// constants pool
allocator: std.mem.Allocator,
constants: std.ArrayList(object.Object),
instructions: std.ArrayList(code.Instructions),

pub fn init(alloc: anytype) Compiler {
    return .{
        .allocator = alloc,
        .constants = .init(alloc),
        .instructions = .init(alloc),
    };
}

pub fn deinit(c: *Compiler) void {
    // std.debug.print("{x}\n", .{c.instructions.items});
    for (c.instructions.items) |ins| c.allocator.free(ins);
    c.constants.deinit();
    c.instructions.deinit();
}

/// Walks the AST recursively and evaluate the node, and add it the the pool
pub fn compile(c: *Compiler, node: ast.Node) !void {
    switch (node) {
        .statement => |stmt| switch (stmt) {
            .program_statement => |program| for (program.statements.items) |s| {
                try c.compile(.{ .statement = s });
            },

            .expression_statement => |exp_stmt| try c.compile(.{ .expression = exp_stmt.expression }),

            else => return error.InvalidStatemend,
        },
        .expression => |exp| switch (exp.*) {
            .infix_expression => |infix| {
                try c.compile(.{ .expression = infix.left });
                try c.compile(.{ .expression = infix.right });
            },

            .integer_literal => |int| {
                const pos = try c.addConstants(.{
                    .integer = .{ .value = int.value },
                });
                _ = try c.emit(.constant, &.{pos});
            },

            else => return error.InvalidExpression,
        },
    }
}

fn addConstants(c: *Compiler, obj: object.Object) !usize {
    try c.constants.append(obj);
    return c.constants.items.len - 1;
}

fn addInstruction(c: *Compiler, ins: code.Instructions) !usize {
    const pos_new_ins = c.instructions.items.len;
    try c.instructions.append(ins);
    return pos_new_ins;
}

/// generate a instruction and add it to a pool
pub fn emit(c: *Compiler, op: code.Opcode, operants: []const usize) !usize {
    const ins = try code.makeBytecode(c.allocator, op, operants);
    return try c.addInstruction(ins);
}

pub fn bytecode(c: *Compiler) !Bytecode {
    const ins = try std.mem.concat(c.allocator, u8, c.instructions.items);
    return .{ .constants = c.constants.items, .instructions = ins };
}

/// compiler generated bytecode
pub const Bytecode = struct {
    constants: []object.Object,
    instructions: code.Instructions,

    pub fn deinit(b: *Bytecode, c: *const Compiler) void {
        c.allocator.free(b.instructions);
    }
};

const std = @import("std");
const ast = @import("ast.zig");
const Parser = @import("Parser.zig");
const code = @import("code.zig");
const object = @import("object.zig");
const Lexer = @import("Lexer.zig");
const talloc = std.testing.allocator;

const CompilerTestCase = struct {
    input: []const u8,
    expected_constants: []const usize,
    expected_instructions: []const []u8,
};

test "Integer Arithmetic" {
    const tests: []const CompilerTestCase = &.{
        .{
            .input = "1 + 2",
            .expected_constants = &.{ 1, 2 },
            .expected_instructions = &.{
                try code.makeBytecode(talloc, .constant, &.{0}),
                try code.makeBytecode(talloc, .constant, &.{1}),
            },
        },
    };

    for (tests) |t| {
        defer for (t.expected_instructions) |bytes| {
            talloc.free(bytes);
        };

        var lexer = Lexer.init(t.input);
        var parser = Parser.new(talloc, &lexer);
        defer parser.deinit();
        const program = try parser.parseProgram();

        var compiler = Compiler.init(talloc);
        defer compiler.deinit();
        try compiler.compile(.{ .statement = .{ .program_statement = program } });
        // // assert the bytecodes
        var b = try compiler.bytecode();
        defer b.deinit(&compiler);

        try checkInstructions(talloc, t.expected_instructions, b.instructions);
        try checkConstants(t.expected_constants, b.constants);
    }
}

fn checkInstructions(alloc: anytype, expected: []const code.Instructions, actual: code.Instructions) !void {
    const concatted = try std.mem.concat(alloc, u8, expected);
    defer alloc.free(concatted);

    if (actual.len != concatted.len) {
        std.log.err("want={}, got={}\n", .{ actual.len, concatted.len });
        return error.WrongInstructionLenght;
    }

    for (actual, concatted) |act, ins| {
        if (act != ins) return error.WrongInstruction;
    }
}

fn checkConstants(expected: anytype, actual: []object.Object) !void {
    if (expected.len != actual.len) return error.WrongNumberOfConstants;

    for (actual, expected) |act, con| {
        switch (@typeInfo(@TypeOf(expected)).pointer.child) {
            usize, i32, i64 => {
                try checkIntegerObject(@intCast(con), act);
            },
            else => {},
        }
    }
}

fn checkIntegerObject(exp: i64, act: object.Object) !void {
    const result = switch (act) {
        .integer => |i| i,
        else => return error.NotAInteger,
    };

    if (result.value != exp) return error.WrongIntegerValue;
}
