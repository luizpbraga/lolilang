// fn, return, match, continue, break, var, const, or, and, as, stop, try, catch
// map, int, real, struct, enum, array, struct_name, enum_name

var x = 10
const y = 100

const foo = fn() { return 10 }
fn foo(y) {
    return 2y
}

const {
    t = 10
    p = "ola"
    c = false
}

const P = struct | enum {
    name
    age
    lenght

    fn foo() {}
    fn bar() {}

    fn nameIs(self){
        return self.name
    }
}


const p = P{ name : "Luiz", 27, lenght: 169 }

var f = foo() catch error { return error }

if v == 10 and x != 12 { ... } else if !true { ... } else { stop } 

for val in list {}
for 0..10 {}
for 0.. {}
for i in 0..10 {}
for i in 0..10, j in 10..20 {}
for k = 10, k < 20, k++ {}
for k = 10, k < 20 {}
for k < 20 {}
for k = 10 {}
for {}

var t = match x {
    1..10 => 0,
    'a'..'z' => 1,
    20 or 30 => 2,
    else => null
}

y = {1, 2, 3, 4}
y = {i for i in y}

x = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }
for i in x, for k in i {}

s = (0, 0, 1, 2)

m = {
    key1 : val1,
    key2 : val2,
}

for k, v in m {}
