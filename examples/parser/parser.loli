import "./token.loli"
import "./ast.loli"

Type := token.Type
Prec := token.Prec

pub var Parser = struct {
    lex
    ctk
    ptk
    ltk

    fn init(lex) {
        p := Parser{
            lex: lex,
            ltk: token.Token{
                type: Type.EOF,
                literal: "",
            },
        }
        p.next()
        p.next()
        return p
    }

    fn next(p) {
        p.ltk = p.ctk
        p.ctk = p.ptk
        p.ptk = p.lex.next()
    }

    fn peekPrec(p) {
        return Prec.peek(p.ptk.type)
    }

    fn currPrec(p) {
        return Prec.peek(p.ctk.type)
    }

    fn parseIdetifier(p) {
        return ast.Expression{
            ty: ast.type.identifier,
            identifier: ast.Identifier{
                value: p.ctk.literal,
            },
        }
    }

    fn parseInteger(p) {
        return ast.Expression{
            ty: ast.type.integer,
            integer: ast.Integer{
                value: @parse(.int, p.ctk.literal),
            },
        }
    }

    fn parseFloat(p) {
        return ast.Expression{
            ty: ast.type.float,
            float: ast.Float{
                value: @parse(.float, p.ctk.literal),
            },
        }
    }

    fn parseBool(p) {
        return ast.Expression{
            ty: ast.type.bool,
            bool: ast.Bool{
                value: p.ctkIs(Type.TRUE),
            },
        }
    }

    fn parseString(p) {
        return ast.Expression{
            ty: ast.type.string,
            string: ast.String{
                value: p.ctk.literal,
            },
        }
    }

    fn parseBlock(p) {
        p.next()

        stmts := []

        for (!p.ctkIs(Type.RBRACE) and !p.ctkIs(Type.EOF)) {
            stmt := p.parseStatement()
            @append(stmts, stmt)
            p.next()
        }

        if (!p.ctkIs(Type.RBRACE)) {
            @print(p.ctk)
            @panic("Missing }")
        }

        return ast.Block{
            statements: stmts,
        }
    }

    fn parseIf(p) {
        if (!p.expectPeek(Type.LPAREN)) {
            @panic("Missing Left parentesis")
        }

        p.next()
        condition := p.parseExpression(Prec.lowest)

        if (!p.expectPeek(Type.RPAREN)) {
            @panic("Missing Right parentesis")
        }

        if (!p.expectPeek(Type.LBRACE)) {
            @print(p.ptk)
            @panic("Missing {")
        }

        consequence := p.parseBlock()

        alternative := null
        if (p.expectPeek(Type.ELSE)) {
            if (!p.expectPeek(Type.LBRACE)) {
                @panic("Missing }")
            }
            alternative = p.parseBlock()
        }

        return ast.Expression{
            ty: ast.type.ifelse,
            ifelse: ast.If{
                condition: condition,
                consequence: consequence,
                alternative: alternative,
            },
        }
    }

    fn prefixExp(p) {
        return match (p.ctk.type) {
            Type.IDENTIFIER => {
                p.parseIdetifier()
            }
            Type.STRING => {
                p.parseString()
            }
            Type.INTEGER => {
                p.parseInteger()
            }
            Type.FLOAT => {
                p.parseFloat()
            }
            Type.TRUE, Type.FALSE => {
                p.parseBool()
            }
            Type.IF, Type.ELSE => {
                p.parseIf()
            }
            else => {
                @print("token type:", p.ctk)
                @panic("Invalid Expression for token literal")
            }
        }
    }

    fn parseVar(p) {
        if (!p.expectPeek(Type.IDENTIFIER)) {
            @panic("EXPECT identifier")
        }
        name := p.parseIdetifier().identifier
        if (!p.expectPeek(Type.EQUAL)) {
            @panic("EXPECT =")
        }
        p.next()
        value := p.parseExpression(Prec.lowest)
        return ast.Statement{
            ty: ast.type.let,
            let: ast.Let{
                name: name,
                value: value,
            },
        }
    }

    fn parseExpStatement(p) {
        exp := p.parseExpression(Prec.lowest)
        return ast.Statement{
            ty: ast.type.exp_stmt,
            exp_stmt: exp,
        }
    }

    fn parseStatement(p) {
        return match (p.ctk.type) {
            Type.VAR => {
                p.parseVar()
            }
            else => {
                p.parseExpStatement()
            }
        }
    }

    fn parseProgram(p) {
        stmts := []
        for (p.ctk.type != Type.EOF) {
            stmt := p.parseStatement()
            @append(stmts, stmt)
            p.next()
        }
        return ast.Program{
            statements: stmts,
        }
    }

    fn parse(p) {
        program := p.parseProgram()
        return ast.Node{
            ty: ast.type.statement,
            statement: ast.Statement{
                ty: ast.type.program,
                program: program,
            },
        }
    }

    fn ptkIs(p, tk) {
        return tk == p.ptk.type
    }

    fn ctkIs(p, tk) {
        return tk == p.ctk.type
    }

    fn expectPeek(p, tk) {
        if (p.ptk.type != tk) {
            return false
        }
        p.next()
        return true
    }

    fn parseExpression(p, prec) {
        left_exp := p.prefixExp()
        for (prec < p.peekPrec()) {
            pre := p.peekPrec()
            @print(pre)
            right_exp := left_exp
            left_exp = p.infixExp(right_exp)
        }

        return left_exp
    }

    fn parseInfix(p, left) {
        op := p.ctk.type
        prec := p.currPrec()
        p.next()
        right := p.parseExpression(prec)
        return ast.Expression{
            ty: ast.type.infix,
            infix: ast.Infix{
                op: op,
                left: left,
                right: right,
            },
        }
    }

    fn infixExp(p, lx) {
        left_exp := match (p.ptk.type) {
            Type.GREATER, Type.GREATER_EQUAL, Type.LESS_EQUAL, Type.LESS, Type.EQUAL_EQUAL, Type.AND, Type.OR, Type.SLASH, Type.MINUS, Type.STAR, Type.PLUS => {
                p.next()
                p.parseInfix(lx)
            }
            else => {
                @panic("Invalid Infix Expression")
            }
        }
        return left_exp
    }
}

