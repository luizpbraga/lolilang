#!loli

# available tokens
Type := enum {
    ILLEGAL EOF_TOK

    IDENTIFIER FLOAT CHAR INTEGER STRING NULL

    PERCENT EQUAL COLON_EQUAL EXCLAMATION EQUAL_EQUAL
    NOT_EQUAL PLUS MINUS PLUS_PLUS MINUS_MINUS SLASH
    STAR GREATER LESS PLUS_EQUAL MINUS_EQUAL STAR_EQUAL
    SLASH_EQUAL GREATER_EQUAL LESS_EQUAL ARROW

    COMMA SEMICOLON COLON CARET

    LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET 
    DOT DOT_DOT DOT_DOT_EQUAL DOT_DOT_DOT

    FN ENUM STRUCT NEW FOR MATCH RETURN VAR CON 
    FALSE_TOK TRUE_TOK IN WITH IF ELSE OR AND 
    CONTINUE BREAK DEFER
}

fn loopUp(ident) {
    return match ident {
        "true" => { Type.TRUE }
        "false" => { Type.FALSE }
        "for" => { Type.FOR }
        "if" => { Type.IF }
        "else" => { Type.ELSE }
        "var" => { Type.VAR }
        "break" => { Type.BREAK }
        "continue" => { Type.CONTINUE }
        "defer" => { Type.DEFER }
        "in" => { Type.IN }
        "and" => { Type.AND }
        "or" => { Type.OR }
        "fn" => { Type.FN }
        "con" => { Type.CON }
        "struct" => { Type.STRUCT }
        "enum" => { Type.ENUM }
        else => { Type.IDENTIFIER }
    }
}

Token := struct {
    type
    literal

    fn init(type, literal) {
        return Token{
            type: type,
            literal: literal,
        }
    }
}

Lexer := struct {
    ch
    input
    position = 0
    read_position = 0

    fn init(file_name) {
        input := @read(file_name)
        l := Lexer{
            input: input,
        }
        l.readChar()
        return l
    }

    fn initFromString(str) {
        l := Lexer{
            input: str,
        }
        l.readChar()
        return l
    }

    fn readChar(l) {
        l.ch = if l.read_position >= l.input.len {
            0
        } else {
            l.input[l.read_position]
        }
        l.position = l.read_position
        l.read_position = l.read_position + 1
    }

    fn peekChar(l) {
        return if l.read_position >= l.input.len {
            0
        } else {
            l.input[l.read_position]
        }
    }

    fn isDigit(ch) {
        return '0' <= ch <= '9'
    }

    fn isLetter(ch) {
        return ('a' <= ch <= 'z') or ('@' <= ch <= 'Z') or (ch == '_')
    }

    fn readNumber(l) {
        pos := l.position
        for Lexer.isDigit(l.ch) {
            l.readChar()
        }

        num := l.input[pos..l.position]
        if num.len == 0: return null;

        return num;
    }

    fn skipWhiteSpace(l) {
        for (l.ch == ' ') or (l.ch == '\n') or (l.ch == '\t') {
            l.readChar()
        }
    }

    fn readIdentifer(l) {
        pos := l.position

        if Lexer.isDigit(l.ch): return null
        
        for Lexer.isLetter(l.ch) or Lexer.isDigit(l.ch) {
            l.readChar()
        }

        ident := l.input[pos..l.position]
        if ident.len == 0: return null 

        return ident
    }

    fn readString(l) {
        pos := l.position + 1
        for {
            l.readChar()
            if l.ch == '"' or l.ch == 0: break
        }
        return l.input[pos..l.position]
    }

    fn nextTk(l) {
        l.skipWhiteSpace()
        lit := l.ch
        tk := match lit {
            '[' => {
                Type.LBRACKET
            }
            ']' => {
                Type.RBRACKET
            }
            '(' => {
                Type.LPAREN
            }
            ')' => {
                Type.RPAREN
            }
            '{' => {
                Type.LBRACE
            }
            '}' => {
                Type.RBRACE
            }
            ',' => {
                Type.COMMA
            }
            ';' => {
                Type.SEMICOLON
            }
            ':' => {
                Type.COLON
            }
            '+' => {
                Type.PLUS
            }
            '-' => {
                Type.MINUS
            }
            '*' => {
                Type.STAR
            }
            '/' => {
                Type.SLASH
            }
            '!' => {
                Type.EXCLAMATION
            }
            '=' => {
                Type.EQUAL
            }
            '>' => {
                Type.GREATER
            }
            '<' => {
                Type.LESS
            }
            '.' => {
                Type.DOT
            }
            
            0 => {
                Type.EOF_TOK
            }

            '"' => { 
              str := l.readString()
              l.readChar()
              return Token.init(Type.STRING, str)
            }
            
            else => {
                ident := l.readIdentifer()
                if ident != null {
                    ty := loopUp(ident)
                    return Token.init(ty, ident)
                }

                number := l.readNumber()
                if number != null {
                    return Token.init(Type.INTEGER, number)
                }
                
                @panic("Found an illigal token")
            }
        }
        l.readChar()
        return Token.init(tk, lit)
    }
}

l := Lexer.init("./test_file")
tk := l.nextTk()
for tk.type != Type.EOF_TOK { 
    @print(tk) 
    tk = l.nextTk() 
}
