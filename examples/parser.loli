# bugs: tags and variables 

# available tokens
Type := enum {
    ILLEGAL EOF_TOK

    IDENTIFIER FLOAT CHAR INTEGER STRING NULL

    PERCENT EQUAL COLON_EQUAL EXCLAMATION EQUAL_EQUAL
    NOT_EQUAL PLUS MINUS PLUS_PLUS MINUS_MINUS SLASH
    STAR GREATER LESS PLUS_EQUAL MINUS_EQUAL STAR_EQUAL
    SLASH_EQUAL GREATER_EQUAL LESS_EQUAL ARROW

    COMMA SEMICOLON COLON CARET

    LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET 
    DOT DOT_DOT DOT_DOT_EQUAL DOT_DOT_DOT

    FN ENUM STRUCT NEW FOR MATCH RETURN VAR CON 
    FALSE_TOK TRUE_TOK IN WITH IF ELSE OR AND 
    CONTINUE BREAK DEFER
}

Token := struct { 
    type
    literal
}

Lexer := struct {
    # file
    input
    # current cursor position
    position = 0
    # current read position
    read_position = 0
    # current character
    ch
}

fn initToken(type, literal) {
  return new Token{ type: type, literal: literal}
}

fn readChar(l) {
    l.ch = if l.read_position >= l.input.len { 0 } else { 
        l.input[l.read_position] 
    }
    l.position = l.read_position
    l.read_position = l.read_position + 1
}

fn peekChar(l) {
    return if l.read_position >= l.input.len { 0 } else { 
      l.input[l.read_position] 
    }
}

fn isDigit(ch) { return ('0' <= ch) and (ch <= '9') }

fn isLetter(ch) { 
    return ('a' <= ch) and (ch <= 'z') or ('A' <= ch) and (ch <= 'Z') or (ch == '_') or (ch == '@')
}

fn readNumber(l) {
    pos := l.position;
    for isDigit(l.ch) { 
        readChar(l) 
    }
    return l.input[pos..l.position]
}

fn readIdentifer(l) {
    pos := l.position;
    if isDigit(l.ch) { 
        return;
    }
    for isLetter(l.ch) or isDigit(l.ch) { 
        readChar(l)
    }
    return l.input[pos..l.position]
}

fn skipWhiteSpace(l) {
    for (l.ch == ' ') or (l.ch == '\n') or (l.ch == '\t') {
        readChar(l)
    }
}

fn nextTk(l) {
    skipWhiteSpace(l);

    ch := l.ch
    tk := match l.ch {
        '[' => {  Type.LBRACKET }
        ']' => {  Type.RBRACKET }
        '(' => {  Type.LPAREN }
        ')' => {  Type.RPAREN }
        '{' => {  Type.LBRACE }
        '}' => {  Type.RBRACE }
        ',' => {  Type.COMMA }
        ';' => {  Type.SEMICOLON }
        ':' => {  Type.COLON }
        '+' => {  Type.PLUS }
        '-' => {  Type.MINUS }
        '*' => {  Type.STAR }
        '/' => {  Type.SLASH }
        '!' => {  Type.EXCLAMATION }
        '=' => {  Type.EQUAL }
        '>' => {  Type.GREATER }
        '<' => {  Type.LESS }
        '.' => {  Type.DOT }
        0   => {  Type.EOF_TOK }
        else => { 
            ident := readIdentifer(l)
            if ident != null {
                return initToken(Type.IDENTIFIER, ident)
            }

            number := readNumber(l)
            if number != null {
                return initToken(Type.INTEGER, number)
            }
            
            return initToken(Type.ILLEGAL, l.ch)
        }
    }

    readChar(l)
    return initToken(tk, ch)
}

fn initLexer(file_name) {
    input := @read(file_name)
    l := new Lexer { input: input }
    readChar(l)
    return l
}

l := initLexer("./test_file")

tk := nextTk(l)
for tk.type != Type.EOF_TOK {
    @print(tk)
    tk = nextTk(l)
}
