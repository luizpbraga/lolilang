# bugs: tags and variables
# available tokens

Type := enum {
    ILLEGAL EOF_TOK

    IDENTIFIER FLOAT CHAR INTEGER STRING NULL

    PERCENT EQUAL COLON_EQUAL EXCLAMATION EQUAL_EQUAL
    NOT_EQUAL PLUS MINUS PLUS_PLUS MINUS_MINUS SLASH
    STAR GREATER LESS PLUS_EQUAL MINUS_EQUAL STAR_EQUAL
    SLASH_EQUAL GREATER_EQUAL LESS_EQUAL ARROW

    COMMA SEMICOLON COLON CARET

    LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET 
    DOT DOT_DOT DOT_DOT_EQUAL DOT_DOT_DOT

    FN ENUM STRUCT NEW FOR MATCH RETURN VAR CON 
    FALSE_TOK TRUE_TOK IN WITH IF ELSE OR AND 
    CONTINUE BREAK DEFER
}

Token := struct { 
    type
    literal

    fn init(type, literal) {
        return new Token{ type: type, literal: literal }
    }
}

Lexer := struct {
    # file
    input
    # current cursor position
    position = 0
    # current read position
    read_position = 0
    # current character
    ch

    fn readChar(l) {
        l.ch = if l.read_position >= l.input.len { 0 } else { 
            l.input[l.read_position] 
        }
        l.position = l.read_position
        l.read_position = l.read_position + 1
    }

    fn peekChar(l) {
        return if l.read_position >= l.input.len { 0 } else { 
            l.input[l.read_position] 
        }
    }

    fn isDigit(ch) { 
        return ('0' <= ch) and (ch <= '9') 
    }

    fn isLetter(ch) { 
        return ('a' <= ch) and (ch <= 'z') or ('A' <= ch) and (ch <= 'Z') or (ch == '_')
    }

    fn readNumber(l) {
        pos := l.position;
        for Lexer.isDigit(l.ch) { 
            l.readChar() 
        }
        return l.input[pos..l.position]
    }

    fn skipWhiteSpace(l) {
        for (l.ch == ' ') or (l.ch == '\n') or (l.ch == '\t') {
            l.readChar()
        }
    }

    fn readIdentifer(l) {
        pos := l.position;
        if Lexer.isDigit(l.ch) { 
            return;
        }
        for Lexer.isLetter(l.ch) or Lexer.isDigit(l.ch) { 
            l.readChar()
        }
        return l.input[pos..l.position]
    }

    fn nextTk(l) {
        l.skipWhiteSpace();

        ch := l.ch
        tk := match l.ch {
            '[' => {  Type.LBRACKET }
            ']' => {  Type.RBRACKET }
            '(' => {  Type.LPAREN }
            ')' => {  Type.RPAREN }
            '{' => {  Type.LBRACE }
            '}' => {  Type.RBRACE }
            ',' => {  Type.COMMA }
            ';' => {  Type.SEMICOLON }
            ':' => {  Type.COLON }
            '+' => {  Type.PLUS }
            '-' => {  Type.MINUS }
            '*' => {  Type.STAR }
            '/' => {  Type.SLASH }
            '!' => {  Type.EXCLAMATION }
            '=' => {  Type.EQUAL }
            '>' => {  Type.GREATER }
            '<' => {  Type.LESS }
            '.' => {  Type.DOT }
            0   => {  Type.EOF_TOK }
            else => { 
                ident := l.readIdentifer()
                if ident != null {
                    return Token.init(Type.IDENTIFIER, ident)
                }

                number := l.readNumber()
                if number != null {
                    return Token.init(Type.INTEGER, number)
                }
                
                return Token.init(Type.ILLEGAL, l.ch)
            }
        }

        l.readChar()
        return Token.init(tk, ch)
    }

    fn init(file_name) {
        input := @read(file_name)
        l := new Lexer { input: input }
        l.readChar()
        return l
    }
}

l := Lexer.init("./test_file")
tk := l.nextTk()
for tk.type != Type.EOF_TOK or tk.type != Type.ILLEGAL {
    @print(tk)
    tk = l.nextTk()
}
